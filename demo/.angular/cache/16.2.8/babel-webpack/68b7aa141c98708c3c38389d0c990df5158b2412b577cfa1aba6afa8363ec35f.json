{"ast":null,"code":"import { EMPTY } from 'rxjs'; // Importa Observable y EMPTY de RxJS\nimport { HttpHeaders, HttpParams } from '@angular/common/http'; // Importa el módulo HttpClient y otros para realizar solicitudes HTTP\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class FlightService {\n  constructor(http) {\n    this.http = http;\n    this.flightList = []; // Almacena una lista de vuelos en el servicio\n  }\n\n  findById(id) {\n    const url = `http://www.angular.at/api/flight/${id}`; // URL para buscar un vuelo por ID\n    const params = {\n      'id': id\n    }; // Parámetros para la solicitud\n    const headers = new HttpHeaders().set('Accept', 'application/json'); // Encabezados para la solicitud\n    return this.http.get(url, {\n      params,\n      headers\n    }); // Realiza una solicitud GET y devuelve un Observable de Flight\n  }\n\n  load(filter) {\n    this.find(filter).subscribe(result => {\n      this.flightList = result; // Carga la lista de vuelos con el resultado de la búsqueda\n    }, err => {\n      console.error('error loading', err); // Registra errores en la consola en caso de falla\n    });\n  }\n\n  find(filter) {\n    const url = `http://www.angular.at/api/flight`; // URL para buscar vuelos con filtro\n    const headers = new HttpHeaders().set('Accept', 'application/json'); // Encabezados para la solicitud\n    const params = {\n      'from': filter.from,\n      'to': filter.to\n    }; // Parámetros para el filtro\n    return this.http.get(url, {\n      params,\n      headers\n    }); // Realiza una solicitud GET y devuelve un Observable de una lista de vuelos\n  }\n\n  save(entity) {\n    let params = new HttpParams();\n    let url = '';\n    const headers = new HttpHeaders().set('content-type', 'application/json'); // Encabezados para la solicitud\n    if (entity.id) {\n      url = `http://www.angular.at/api/flight/${entity.id.toString()}`; // URL para actualizar un vuelo existente\n      params = new HttpParams().set('ID', entity.id.toString()); // Parámetros para la solicitud\n      return this.http.put(url, entity, {\n        headers,\n        params\n      }); // Realiza una solicitud PUT para actualizar un vuelo\n    } else {\n      url = `http://www.angular.at/api/flight`; // URL para crear un nuevo vuelo\n      return this.http.post(url, entity, {\n        headers,\n        params\n      }); // Realiza una solicitud POST para crear un nuevo vuelo\n    }\n  }\n\n  delete(entity) {\n    let params = new HttpParams();\n    let url = '';\n    const headers = new HttpHeaders().set('content-type', 'application/json'); // Encabezados para la solicitud\n    if (entity.id) {\n      url = `http://www.angular.at/api/flight/${entity.id.toString()}`; // URL para eliminar un vuelo por ID\n      params = new HttpParams().set('ID', entity.id.toString()); // Parámetros para la solicitud\n      return this.http.delete(url, {\n        headers,\n        params\n      }); // Realiza una solicitud DELETE para eliminar un vuelo\n    }\n\n    return EMPTY; // Retorna un Observable vacío si no se especifica un ID\n  }\n  static #_ = this.ɵfac = function FlightService_Factory(t) {\n    return new (t || FlightService)(i0.ɵɵinject(i1.HttpClient));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: FlightService,\n    factory: FlightService.ɵfac\n  });\n}","map":{"version":3,"names":["EMPTY","HttpHeaders","HttpParams","FlightService","constructor","http","flightList","findById","id","url","params","headers","set","get","load","filter","find","subscribe","result","err","console","error","from","to","save","entity","toString","put","post","delete","_","i0","ɵɵinject","i1","HttpClient","_2","factory","ɵfac"],"sources":["C:\\Users\\Matías\\Desktop\\Proyecto Final\\angular-crud\\demo\\src\\app\\flight\\flight.service.ts"],"sourcesContent":["import { Flight } from './flight'; // Importa la clase Flight para definir el tipo de datos\r\nimport { FlightFilter } from './flight-filter'; // Importa la clase FlightFilter para definir filtros\r\nimport { Injectable } from '@angular/core'; // Importa el decorador Injectable para marcar el servicio como inyectable\r\nimport { EMPTY, Observable } from 'rxjs'; // Importa Observable y EMPTY de RxJS\r\nimport { HttpClient, HttpHeaders, HttpParams } from '@angular/common/http'; // Importa el módulo HttpClient y otros para realizar solicitudes HTTP\r\n\r\n@Injectable() // Marca el servicio como inyectable\r\nexport class FlightService {\r\n  flightList: Flight[] = []; // Almacena una lista de vuelos en el servicio\r\n\r\n  constructor(private http: HttpClient) {\r\n  }\r\n\r\n  findById(id: string): Observable<Flight> {\r\n    const url = `http://www.angular.at/api/flight/${id}`; // URL para buscar un vuelo por ID\r\n    const params = { 'id': id }; // Parámetros para la solicitud\r\n    const headers = new HttpHeaders().set('Accept', 'application/json'); // Encabezados para la solicitud\r\n    return this.http.get<Flight>(url, { params, headers }); // Realiza una solicitud GET y devuelve un Observable de Flight\r\n  }\r\n\r\n  load(filter: FlightFilter): void {\r\n    this.find(filter).subscribe(result => {\r\n      this.flightList = result; // Carga la lista de vuelos con el resultado de la búsqueda\r\n    },\r\n    err => {\r\n      console.error('error loading', err); // Registra errores en la consola en caso de falla\r\n    });\r\n  }\r\n\r\n  find(filter: FlightFilter): Observable<Flight[]> {\r\n    const url = `http://www.angular.at/api/flight`; // URL para buscar vuelos con filtro\r\n    const headers = new HttpHeaders().set('Accept', 'application/json'); // Encabezados para la solicitud\r\n\r\n    const params = {\r\n      'from': filter.from,\r\n      'to': filter.to,\r\n    }; // Parámetros para el filtro\r\n\r\n    return this.http.get<Flight[]>(url, { params, headers }); // Realiza una solicitud GET y devuelve un Observable de una lista de vuelos\r\n  }\r\n\r\n  save(entity: Flight): Observable<Flight> {\r\n    let params = new HttpParams();\r\n    let url = '';\r\n    const headers = new HttpHeaders().set('content-type', 'application/json'); // Encabezados para la solicitud\r\n    if (entity.id) {\r\n      url = `http://www.angular.at/api/flight/${entity.id.toString()}`; // URL para actualizar un vuelo existente\r\n      params = new HttpParams().set('ID', entity.id.toString()); // Parámetros para la solicitud\r\n      return this.http.put<Flight>(url, entity, { headers, params }); // Realiza una solicitud PUT para actualizar un vuelo\r\n    } else {\r\n      url = `http://www.angular.at/api/flight`; // URL para crear un nuevo vuelo\r\n      return this.http.post<Flight>(url, entity, { headers, params }); // Realiza una solicitud POST para crear un nuevo vuelo\r\n    }\r\n  }\r\n\r\n  delete(entity: Flight): Observable<Flight> {\r\n    let params = new HttpParams();\r\n    let url = '';\r\n    const headers = new HttpHeaders().set('content-type', 'application/json'); // Encabezados para la solicitud\r\n    if (entity.id) {\r\n      url = `http://www.angular.at/api/flight/${entity.id.toString()}`; // URL para eliminar un vuelo por ID\r\n      params = new HttpParams().set('ID', entity.id.toString()); // Parámetros para la solicitud\r\n      return this.http.delete<Flight>(url, { headers, params }); // Realiza una solicitud DELETE para eliminar un vuelo\r\n    }\r\n    return EMPTY; // Retorna un Observable vacío si no se especifica un ID\r\n  }\r\n}\r\n\r\n\r\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}